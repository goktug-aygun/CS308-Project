name: Run Integration Tests

on:
  push:
    branches:
      - main  # Run the workflow only on pushes to the main branch

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Set up Python
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # Run integration test
      - name: Pilot_Integration
        if: contains(github.event.head_commit.message, 'SQL_Merge')
        env:
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
        run: |
          pytest ../Backend_Unit_Tests/Pilot_Integration_Test.py --junitxml=junit/test-results.xml --cov=com --cov-report=xml --cov-report=html
      
      # Run integration test
      - name: Known_Languages_Integration
        if: contains(github.event.head_commit.message, 'SQL_Merge')
        env:
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
        run: |
          pytest ../Backend_Unit_Tests/KnownLanguages_Integration_Test.py --junitxml=junit/test-results.xml --cov=com --cov-report=xml --cov-report=html

      # Run integration test
      - name: Crew_Integration
        if: contains(github.event.head_commit.message, 'SQL_Merge')
        env:
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
        run: |
          pytest ../Backend_Unit_Tests/Crew_Integration_Test.py --junitxml=junit/test-results.xml --cov=com --cov-report=xml --cov-report=html

      # Run integration test
      - name: Location_Integration
        if: contains(github.event.head_commit.message, 'SQL_Merge')
        env:
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
        run: |
          pytest ../Backend_Unit_Tests/Location_Integration_Test.py --junitxml=junit/test-results.xml --cov=com --cov-report=xml --cov-report=html

      # Run integration test
      - name: Plane_Integration
        if: contains(github.event.head_commit.message, 'SQL_Merge')
        env:
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
        run: |
          pytest ../Backend_Unit_Tests/Plane_Integration_Test.py --junitxml=junit/test-results.xml --cov=com --cov-report=xml --cov-report=html

      # Run integration test
      - name: Flight_Integration
        if: contains(github.event.head_commit.message, 'SQL_Merge')
        env:
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
        run: |
          pytest ../Backend_Unit_Tests/Flight_Integration_Test.py --junitxml=junit/test-results.xml --cov=com --cov-report=xml --cov-report=html

      
        # Run integration test
      - name: Seat_Integration
        if: contains(github.event.head_commit.message, 'SQL_Merge')
        env:
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
        run: |
          pytest ../Backend_Unit_Tests/Seat_Integration_Test.py --junitxml=junit/test-results.xml --cov=com --cov-report=xml --cov-report=html

        # Run integration test
      - name: FlightCrew_Integration
        if: contains(github.event.head_commit.message, 'SQL_Merge')
        env:
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
        run: |
          pytest ../Backend_Unit_Tests/FlightCrew_Integration_Test.py --junitxml=junit/test-results.xml --cov=com --cov-report=xml --cov-report=html
          

        # Run integration test for passenger